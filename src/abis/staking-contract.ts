// Generated by @wagmi/cli@0.1.15 on 7/27/2023 at 11:23:23â€¯AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakingContractMainnet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stakingContractMainnetABI = [
  { type: "error", inputs: [], name: "AlreadySubscribed" },
  { type: "error", inputs: [], name: "AlreadyUnsubscribed" },
  {
    type: "error",
    inputs: [{ name: "innerError", internalType: "bytes", type: "bytes" }],
    name: "BatchError",
  },
  { type: "error", inputs: [], name: "FullyPacked" },
  { type: "error", inputs: [], name: "IncentiveOverflow" },
  { type: "error", inputs: [], name: "InsufficientStakedAmount" },
  { type: "error", inputs: [], name: "InvalidIndex" },
  { type: "error", inputs: [], name: "InvalidInput" },
  { type: "error", inputs: [], name: "InvalidTimeFrame" },
  { type: "error", inputs: [], name: "NoToken" },
  { type: "error", inputs: [], name: "NonZero" },
  { type: "error", inputs: [], name: "NotStaked" },
  { type: "error", inputs: [], name: "NotSubscribed" },
  { type: "error", inputs: [], name: "OnlyCreator" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Claim",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "rewardToken",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "startTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "endTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "IncentiveCreated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      {
        name: "changeAmount",
        internalType: "int256",
        type: "int256",
        indexed: false,
      },
      {
        name: "newStartTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "newEndTime",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "IncentiveUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Stake",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "Subscribe",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Unstake",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "Unsubscribe",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "incentiveId", internalType: "uint256", type: "uint256" }],
    name: "accrueRewards",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "datas", internalType: "bytes[]", type: "bytes[]" }],
    name: "batch",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "incentiveIds", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "claimRewards",
    outputs: [
      { name: "rewards", internalType: "uint256[]", type: "uint256[]" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "rewardToken", internalType: "address", type: "address" },
      { name: "rewardAmount", internalType: "uint112", type: "uint112" },
      { name: "startTime", internalType: "uint32", type: "uint32" },
      { name: "endTime", internalType: "uint32", type: "uint32" },
    ],
    name: "createIncentive",
    outputs: [
      { name: "incentiveId", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "incentiveCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "incentives",
    outputs: [
      { name: "creator", internalType: "address", type: "address" },
      { name: "token", internalType: "address", type: "address" },
      { name: "rewardToken", internalType: "address", type: "address" },
      { name: "endTime", internalType: "uint32", type: "uint32" },
      { name: "rewardPerLiquidity", internalType: "uint256", type: "uint256" },
      { name: "lastRewardTime", internalType: "uint32", type: "uint32" },
      { name: "rewardRemaining", internalType: "uint112", type: "uint112" },
      { name: "liquidityStaked", internalType: "uint112", type: "uint112" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "rewardPerLiquidityLast",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint112", type: "uint112" },
      { name: "incentiveIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "transferExistingRewards", internalType: "bool", type: "bool" },
    ],
    name: "stakeAndSubscribeToIncentives",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint112", type: "uint112" },
      { name: "transferExistingRewards", internalType: "bool", type: "bool" },
    ],
    name: "stakeToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "incentiveId", internalType: "uint256", type: "uint256" }],
    name: "subscribeToIncentive",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint112", type: "uint112" },
      { name: "transferExistingRewards", internalType: "bool", type: "bool" },
    ],
    name: "unstakeToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "incentiveIndex", internalType: "uint256", type: "uint256" },
      { name: "ignoreRewards", internalType: "bool", type: "bool" },
    ],
    name: "unsubscribeFromIncentive",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "incentiveId", internalType: "uint256", type: "uint256" },
      { name: "changeAmount", internalType: "int112", type: "int112" },
      { name: "newStartTime", internalType: "uint32", type: "uint32" },
      { name: "newEndTime", internalType: "uint32", type: "uint32" },
    ],
    name: "updateIncentive",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "userStakes",
    outputs: [
      { name: "liquidity", internalType: "uint112", type: "uint112" },
      {
        name: "subscribedIncentiveIds",
        internalType: "uint144",
        type: "uint144",
      },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stakingContractMainnetABI}__.
 */
export function useStakingContractMainnet(
  config: Omit<UseContractConfig, "abi"> = {} as any
) {
  return useContract({ abi: stakingContractMainnetABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractMainnetABI}__.
 */
export function useStakingContractMainnetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof stakingContractMainnetABI,
    TFunctionName
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractMainnetABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: stakingContractMainnetABI,
    ...config,
  } as UseContractReadConfig<typeof stakingContractMainnetABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"incentiveCount"`.
 */
export function useStakingContractMainnetIncentiveCount<
  TSelectData = ReadContractResult<
    typeof stakingContractMainnetABI,
    "incentiveCount"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractMainnetABI,
      "incentiveCount",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stakingContractMainnetABI,
    functionName: "incentiveCount",
    ...config,
  } as UseContractReadConfig<typeof stakingContractMainnetABI, "incentiveCount", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"incentives"`.
 */
export function useStakingContractMainnetIncentives<
  TSelectData = ReadContractResult<
    typeof stakingContractMainnetABI,
    "incentives"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractMainnetABI,
      "incentives",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stakingContractMainnetABI,
    functionName: "incentives",
    ...config,
  } as UseContractReadConfig<typeof stakingContractMainnetABI, "incentives", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"rewardPerLiquidityLast"`.
 */
export function useStakingContractMainnetRewardPerLiquidityLast<
  TSelectData = ReadContractResult<
    typeof stakingContractMainnetABI,
    "rewardPerLiquidityLast"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractMainnetABI,
      "rewardPerLiquidityLast",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stakingContractMainnetABI,
    functionName: "rewardPerLiquidityLast",
    ...config,
  } as UseContractReadConfig<typeof stakingContractMainnetABI, "rewardPerLiquidityLast", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"userStakes"`.
 */
export function useStakingContractMainnetUserStakes<
  TSelectData = ReadContractResult<
    typeof stakingContractMainnetABI,
    "userStakes"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof stakingContractMainnetABI,
      "userStakes",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stakingContractMainnetABI,
    functionName: "userStakes",
    ...config,
  } as UseContractReadConfig<typeof stakingContractMainnetABI, "userStakes", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__.
 */
export function useStakingContractMainnetWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          string
        >["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    TFunctionName
  >({ abi: stakingContractMainnetABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"accrueRewards"`.
 */
export function useStakingContractMainnetAccrueRewards<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "accrueRewards"
        >["abi"],
        "accrueRewards"
      > & { functionName?: "accrueRewards" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "accrueRewards"
      > & {
        abi?: never;
        functionName?: "accrueRewards";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    "accrueRewards"
  >({
    abi: stakingContractMainnetABI,
    functionName: "accrueRewards",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"batch"`.
 */
export function useStakingContractMainnetBatch<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "batch"
        >["abi"],
        "batch"
      > & { functionName?: "batch" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "batch"
      > & {
        abi?: never;
        functionName?: "batch";
      } = {} as any
) {
  return useContractWrite<TMode, typeof stakingContractMainnetABI, "batch">({
    abi: stakingContractMainnetABI,
    functionName: "batch",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"claimRewards"`.
 */
export function useStakingContractMainnetClaimRewards<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "claimRewards"
        >["abi"],
        "claimRewards"
      > & { functionName?: "claimRewards" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "claimRewards"
      > & {
        abi?: never;
        functionName?: "claimRewards";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    "claimRewards"
  >({
    abi: stakingContractMainnetABI,
    functionName: "claimRewards",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"createIncentive"`.
 */
export function useStakingContractMainnetCreateIncentive<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "createIncentive"
        >["abi"],
        "createIncentive"
      > & { functionName?: "createIncentive" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "createIncentive"
      > & {
        abi?: never;
        functionName?: "createIncentive";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    "createIncentive"
  >({
    abi: stakingContractMainnetABI,
    functionName: "createIncentive",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"stakeAndSubscribeToIncentives"`.
 */
export function useStakingContractMainnetStakeAndSubscribeToIncentives<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "stakeAndSubscribeToIncentives"
        >["abi"],
        "stakeAndSubscribeToIncentives"
      > & { functionName?: "stakeAndSubscribeToIncentives" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "stakeAndSubscribeToIncentives"
      > & {
        abi?: never;
        functionName?: "stakeAndSubscribeToIncentives";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    "stakeAndSubscribeToIncentives"
  >({
    abi: stakingContractMainnetABI,
    functionName: "stakeAndSubscribeToIncentives",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"stakeToken"`.
 */
export function useStakingContractMainnetStakeToken<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "stakeToken"
        >["abi"],
        "stakeToken"
      > & { functionName?: "stakeToken" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "stakeToken"
      > & {
        abi?: never;
        functionName?: "stakeToken";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    "stakeToken"
  >({
    abi: stakingContractMainnetABI,
    functionName: "stakeToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"subscribeToIncentive"`.
 */
export function useStakingContractMainnetSubscribeToIncentive<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "subscribeToIncentive"
        >["abi"],
        "subscribeToIncentive"
      > & { functionName?: "subscribeToIncentive" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "subscribeToIncentive"
      > & {
        abi?: never;
        functionName?: "subscribeToIncentive";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    "subscribeToIncentive"
  >({
    abi: stakingContractMainnetABI,
    functionName: "subscribeToIncentive",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"unstakeToken"`.
 */
export function useStakingContractMainnetUnstakeToken<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "unstakeToken"
        >["abi"],
        "unstakeToken"
      > & { functionName?: "unstakeToken" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "unstakeToken"
      > & {
        abi?: never;
        functionName?: "unstakeToken";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    "unstakeToken"
  >({
    abi: stakingContractMainnetABI,
    functionName: "unstakeToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"unsubscribeFromIncentive"`.
 */
export function useStakingContractMainnetUnsubscribeFromIncentive<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "unsubscribeFromIncentive"
        >["abi"],
        "unsubscribeFromIncentive"
      > & { functionName?: "unsubscribeFromIncentive" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "unsubscribeFromIncentive"
      > & {
        abi?: never;
        functionName?: "unsubscribeFromIncentive";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    "unsubscribeFromIncentive"
  >({
    abi: stakingContractMainnetABI,
    functionName: "unsubscribeFromIncentive",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"updateIncentive"`.
 */
export function useStakingContractMainnetUpdateIncentive<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakingContractMainnetABI,
          "updateIncentive"
        >["abi"],
        "updateIncentive"
      > & { functionName?: "updateIncentive" }
    : UseContractWriteConfig<
        TMode,
        typeof stakingContractMainnetABI,
        "updateIncentive"
      > & {
        abi?: never;
        functionName?: "updateIncentive";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof stakingContractMainnetABI,
    "updateIncentive"
  >({
    abi: stakingContractMainnetABI,
    functionName: "updateIncentive",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__.
 */
export function usePrepareStakingContractMainnetWrite<
  TFunctionName extends string
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      TFunctionName
    >,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"accrueRewards"`.
 */
export function usePrepareStakingContractMainnetAccrueRewards(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      "accrueRewards"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "accrueRewards",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "accrueRewards">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"batch"`.
 */
export function usePrepareStakingContractMainnetBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "batch">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "batch",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "batch">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"claimRewards"`.
 */
export function usePrepareStakingContractMainnetClaimRewards(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      "claimRewards"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "claimRewards",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "claimRewards">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"createIncentive"`.
 */
export function usePrepareStakingContractMainnetCreateIncentive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      "createIncentive"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "createIncentive",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "createIncentive">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"stakeAndSubscribeToIncentives"`.
 */
export function usePrepareStakingContractMainnetStakeAndSubscribeToIncentives(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      "stakeAndSubscribeToIncentives"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "stakeAndSubscribeToIncentives",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "stakeAndSubscribeToIncentives">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"stakeToken"`.
 */
export function usePrepareStakingContractMainnetStakeToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      "stakeToken"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "stakeToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "stakeToken">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"subscribeToIncentive"`.
 */
export function usePrepareStakingContractMainnetSubscribeToIncentive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      "subscribeToIncentive"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "subscribeToIncentive",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "subscribeToIncentive">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"unstakeToken"`.
 */
export function usePrepareStakingContractMainnetUnstakeToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      "unstakeToken"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "unstakeToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "unstakeToken">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"unsubscribeFromIncentive"`.
 */
export function usePrepareStakingContractMainnetUnsubscribeFromIncentive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      "unsubscribeFromIncentive"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "unsubscribeFromIncentive",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "unsubscribeFromIncentive">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `functionName` set to `"updateIncentive"`.
 */
export function usePrepareStakingContractMainnetUpdateIncentive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakingContractMainnetABI,
      "updateIncentive"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stakingContractMainnetABI,
    functionName: "updateIncentive",
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakingContractMainnetABI, "updateIncentive">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractMainnetABI}__.
 */
export function useStakingContractMainnetEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof stakingContractMainnetABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: stakingContractMainnetABI,
    ...config,
  } as UseContractEventConfig<typeof stakingContractMainnetABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `eventName` set to `"Claim"`.
 */
export function useStakingContractMainnetClaimEvent(
  config: Omit<
    UseContractEventConfig<typeof stakingContractMainnetABI, "Claim">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: stakingContractMainnetABI,
    eventName: "Claim",
    ...config,
  } as UseContractEventConfig<typeof stakingContractMainnetABI, "Claim">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `eventName` set to `"IncentiveCreated"`.
 */
export function useStakingContractMainnetIncentiveCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof stakingContractMainnetABI,
      "IncentiveCreated"
    >,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: stakingContractMainnetABI,
    eventName: "IncentiveCreated",
    ...config,
  } as UseContractEventConfig<typeof stakingContractMainnetABI, "IncentiveCreated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `eventName` set to `"IncentiveUpdated"`.
 */
export function useStakingContractMainnetIncentiveUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof stakingContractMainnetABI,
      "IncentiveUpdated"
    >,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: stakingContractMainnetABI,
    eventName: "IncentiveUpdated",
    ...config,
  } as UseContractEventConfig<typeof stakingContractMainnetABI, "IncentiveUpdated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `eventName` set to `"Stake"`.
 */
export function useStakingContractMainnetStakeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakingContractMainnetABI, "Stake">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: stakingContractMainnetABI,
    eventName: "Stake",
    ...config,
  } as UseContractEventConfig<typeof stakingContractMainnetABI, "Stake">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `eventName` set to `"Subscribe"`.
 */
export function useStakingContractMainnetSubscribeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakingContractMainnetABI, "Subscribe">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: stakingContractMainnetABI,
    eventName: "Subscribe",
    ...config,
  } as UseContractEventConfig<typeof stakingContractMainnetABI, "Subscribe">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `eventName` set to `"Unstake"`.
 */
export function useStakingContractMainnetUnstakeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakingContractMainnetABI, "Unstake">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: stakingContractMainnetABI,
    eventName: "Unstake",
    ...config,
  } as UseContractEventConfig<typeof stakingContractMainnetABI, "Unstake">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakingContractMainnetABI}__ and `eventName` set to `"Unsubscribe"`.
 */
export function useStakingContractMainnetUnsubscribeEvent(
  config: Omit<
    UseContractEventConfig<typeof stakingContractMainnetABI, "Unsubscribe">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: stakingContractMainnetABI,
    eventName: "Unsubscribe",
    ...config,
  } as UseContractEventConfig<typeof stakingContractMainnetABI, "Unsubscribe">);
}
